# Init Containers

# The init containers option is available in Kubernetes environments used to run additional containers at startup that help initialize an application. 
# Once the init containers have completed their initialization tasks, they terminate but leave the application container(s) running. For the App Server Agent installation, init containers are used as a delivery mechanism to copy the agent files into the application container at deploy time.

# Overview on Kubernetes init containers
# An init container is an additional container in a Pod that completes a task before the regular container is started
# Init containers always run to completion.
# Each init container must complete successfully before the next one starts.
# The regular container will only be started once the init container has been started
# An init container in a Pod must run and complete before any other application containers in the Pod started.
# This is a great way to initialize a Kubernetes pod. You can pull any files, configurations, and so on with an init container.
# Just as with any other application container, we can have more than one init container in a given Pod; but unlike an application container, each init container must run to completion before the next init container starts.

# Differences from regular containers Official Docs
# Init containers support all the fields and features of app containers, including resource limits, volumes, and security settings.
# However, the resource requests and limits for an init container are handled differently, as documented in Resources.
# init containers do not support lifecycle, livenessProbe, readinessProbe, or startupProbe because they must run to completion before the Pod can be ready.
# If you specify multiple init containers for a Pod, kubelet runs each init container sequentially. Each init container must succeed before the next can run. When all of the init containers have run to completion, kubelet initializes the application containers for the Pod and runs them as usual.

apiVersion: v1
kind: Pod

metadata:
  name: myfirstinitpod
  labels:
    label1: harsh
    label2: harsh1
    label3: harsh2

spec:
  initContainers:
    - name: initcontainer
      image: nginx
      args: ["sleep", "20"]

  containers:
    - name: first-normal-container
      image: nginx
      env:
        - name: Container-Name
          value: NGINX
