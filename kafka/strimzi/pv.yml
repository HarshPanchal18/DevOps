# This file contains the StorageClass, PV and PVC definitions for Kafka and Zookeeper.

# Kafka
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-kafka
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv-0
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/harsh/volume/kafka0
    type: DirectoryOrCreate
  storageClassName: sc-kafka
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - kind-kube-worker
                - kind-kube-worker2
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    namespace: myproject
    name: data-kafka-data-kafka-0 # The name of the PVC that Kafka will use created by storageClass dynamically.
    # This ensure that this PersistentVolume is reserved for use by the specified PersistentVolumeClaim, preventing other claims from binding to it.
    # This is especially important in stateful applications like Kafka, where data persistence and correct volume association are critical for reliability and data integrity.

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv-1
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/harsh/volume/kafka1
    type: DirectoryOrCreate
  storageClassName: sc-kafka
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - kind-kube-worker
                - kind-kube-worker2
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    namespace: myproject
    name: data-kafka-data-kafka-1

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv-2
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/harsh/volume/kafka2
    type: DirectoryOrCreate
  storageClassName: sc-kafka
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - kind-kube-worker
                - kind-kube-worker2
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    namespace: myproject
    name: data-kafka-data-kafka-2

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv-3
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/harsh/volume/kafka3
    type: DirectoryOrCreate
  storageClassName: sc-kafka
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - kind-kube-worker
                - kind-kube-worker2
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    namespace: myproject
    name: data-kafka-data-kafka-3

# Zookeeper
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-zookeeper
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: zookeeper-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/harsh/volume/zookeeper
    type: DirectoryOrCreate
  storageClassName: sc-zookeeper
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - kind-kube-worker
                - kind-kube-worker2
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: data-kafka-data-zookeeper-0
    namespace: myproject
